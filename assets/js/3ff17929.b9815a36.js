"use strict";(self.webpackChunkwiki_docusaurus=self.webpackChunkwiki_docusaurus||[]).push([[4023],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>u});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},h={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),u=a,g=d["".concat(c,".").concat(u)]||d[u]||h[u]||i;return t?n.createElement(g,o(o({ref:r},p),{},{components:t})):n.createElement(g,o({ref:r},p))}));function u(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2783:(e,r,t)=>{t.r(r),t.d(r,{frontMatter:()=>i,contentTitle:()=>o,metadata:()=>l,toc:()=>c,default:()=>p});var n=t(7462),a=(t(7294),t(3905));const i={id:"graphs-overview",title:"Graphs Overview"},o=void 0,l={unversionedId:"algorithms/graphs/graphs-overview",id:"algorithms/graphs/graphs-overview",title:"Graphs Overview",description:"Graph",source:"@site/docs/algorithms/graphs/overview.md",sourceDirName:"algorithms/graphs",slug:"/algorithms/graphs/graphs-overview",permalink:"/yogeshcodes/algorithms/graphs/graphs-overview",tags:[],version:"current",frontMatter:{id:"graphs-overview",title:"Graphs Overview"},sidebar:"docs",previous:{title:"Selection Sort",permalink:"/yogeshcodes/algorithms/sorting/selection-sort"},next:{title:"Trees Overview",permalink:"/yogeshcodes/algorithms/trees/trees-overview"}},c=[{value:"Graph",id:"graph",children:[],level:3},{value:"Graph Cycle",id:"graph-cycle",children:[],level:3},{value:"Acyclic Graph",id:"acyclic-graph",children:[],level:3},{value:"Cyclic Graph",id:"cyclic-graph",children:[],level:3},{value:"Directed Graph",id:"directed-graph",children:[],level:3},{value:"Undirected Graph",id:"undirected-graph",children:[],level:3},{value:"Connected Graph",id:"connected-graph",children:[],level:3}],s={toc:c};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"graph"},"Graph"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A collection of nodes or values called vertices that might be related; relations between vertices are called edges."),(0,a.kt)("li",{parentName:"ul"},"Many things in life can be represented by graphs; for example a social network can be represented by a graph whose vertices are users and whose edges are friendships between the users. Similarly, a city map can be represented by a graph whose vertices are locations in the city and whose edges are roads between the locations. ")),(0,a.kt)("h3",{id:"graph-cycle"},"Graph Cycle"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simply put, a cycle occurs in a graph when three or more vertices in the graph are connected so as to form a closed loop. "),(0,a.kt)("li",{parentName:"ul"},"Note that the definition of a graph cycle is sometimes broadened to include cycles of length two or one; in the context of coding interviews, when dealing with questions that involve graph cycles, it's important to clarify what exactly constitutues a cycle.")),(0,a.kt)("h3",{id:"acyclic-graph"},"Acyclic Graph"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A graph that has no cycles.")),(0,a.kt)("h3",{id:"cyclic-graph"},"Cyclic Graph"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A graph that has at least one cycle.")),(0,a.kt)("h3",{id:"directed-graph"},"Directed Graph"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A graph whose edges are directed, meaning that they can only be traversed in one direction, which is specified."),(0,a.kt)("li",{parentName:"ul"},"For example, a graph of ariports and flights would likely be directed, since a flight specifically goes from one airport to another (i.e., it has a direction), without necessarily implying the presence of a flight in the opposite direction.")),(0,a.kt)("h3",{id:"undirected-graph"},"Undirected Graph"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A graph whose edges are undirected, meaning that they can be traversed in both directions."),(0,a.kt)("li",{parentName:"ul"},"For example, a graph of friends would likey be undirected, since a friendship is, by nature, bidirectional.")),(0,a.kt)("h3",{id:"connected-graph"},"Connected Graph"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A graph is connected if for every pair of vertices in the graph, there's a path of one or more edges connecting the given vertices."),(0,a.kt)("li",{parentName:"ul"},"In the case of a directed graph, the graph is:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"strongly connected if there are bidirectional connections between the vertices of every pair of vertices (i.e., for every vertex-pair ",(0,a.kt)("inlineCode",{parentName:"li"},"(u,v)")," you can reach ",(0,a.kt)("inlineCode",{parentName:"li"},"v")," from ",(0,a.kt)("inlineCode",{parentName:"li"},"u")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"u")," from ",(0,a.kt)("inlineCode",{parentName:"li"},"v"),")"),(0,a.kt)("li",{parentName:"ul"},"weakly connected if there are connections(but not necessarily bidirectional ones) between the vertices of every pair of vertices."))),(0,a.kt)("li",{parentName:"ul"},"A graph that is't connected is said to be disconnected.")))}p.isMDXComponent=!0}}]);