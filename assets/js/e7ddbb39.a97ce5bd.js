"use strict";(self.webpackChunkwiki_docusaurus=self.webpackChunkwiki_docusaurus||[]).push([[6020],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(h,c(c({ref:t},u),{},{components:n})):r.createElement(h,c({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5020:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>o,contentTitle:()=>c,metadata:()=>i,toc:()=>s,default:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={id:"command-pattern",title:"Command Pattern"},c=void 0,i={unversionedId:"coding-patterns/structural/command-pattern",id:"coding-patterns/structural/command-pattern",title:"Command Pattern",description:"The command pattern is useful in cases when we want to decouple objects executing the commands from objects issuing the commands. For example, imagine a scenario where our application is using a large number of API service calls. Then, let\u2019s say that the API services change. We would have to modify the code wherever the APIs that changed are called.",source:"@site/docs/coding-patterns/structural/command-pattern.md",sourceDirName:"coding-patterns/structural",slug:"/coding-patterns/structural/command-pattern",permalink:"/yogeshcodes/coding-patterns/structural/command-pattern",tags:[],version:"current",frontMatter:{id:"command-pattern",title:"Command Pattern"},sidebar:"docs",previous:{title:"Dependency Inversion Principle",permalink:"/yogeshcodes/coding-patterns/solid-principles/dependency-inversion-principle"},next:{title:"Constructor Pattern",permalink:"/yogeshcodes/coding-patterns/structural/constructor-pattern"}},s=[],l={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The command pattern is useful in cases when we want to decouple objects executing the commands from objects issuing the commands. For example, imagine a scenario where our application is using a large number of API service calls. Then, let\u2019s say that the API services change. We would have to modify the code wherever the APIs that changed are called."),(0,a.kt)("p",null,"This would be a great place to implement an abstraction layer, which would separate the objects calling an API service from the objects which are telling them\xa0",(0,a.kt)("em",{parentName:"p"},"when"),"\xa0to call the API service. This way, we avoid modification in all of the places where we have a need to call the service, but rather have to change only the objects which are making the call itself, which is only one place."),(0,a.kt)("p",null,"As with any other pattern, we have to know when exactly is there a real need for such a pattern. We need to be aware of the tradeoff we are making, as we are adding an additional abstraction layer over the API calls, which will reduce performance but potentially save a lot of time when we need to modify objects executing the commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// the object which knows how to execute the command\nvar invoker = {\n    add: function(x, y) {\n        return x + y;\n    },\n    subtract: function(x, y) {\n        return x - y;\n    }\n}\n\n// the object which is used as an abstraction layer when\n// executing commands; it represents an interface\n// toward the invoker object\nvar manager = {\n    execute: function(name, args) {\n        if (name in invoker) {\n            return invoker[name].apply(invoker, [].slice.call(arguments, 1));\n        }\n        return false;\n    }\n}\n\n// prints 8\nconsole.log(manager.execute("add", 3, 5));\n// prints 2\nconsole.log(manager.execute("subtract", 5, 3));\n')))}u.isMDXComponent=!0}}]);