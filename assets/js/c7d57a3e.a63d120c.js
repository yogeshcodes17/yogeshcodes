"use strict";(self.webpackChunkwiki_docusaurus=self.webpackChunkwiki_docusaurus||[]).push([[2895],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},h=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=c(r),u=a,m=p["".concat(s,".").concat(u)]||p[u]||d[u]||i;return r?n.createElement(m,o(o({ref:t},h),{},{components:r})):n.createElement(m,o({ref:t},h))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4254:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>i,contentTitle:()=>o,metadata:()=>l,toc:()=>s,default:()=>h});var n=r(7462),a=(r(7294),r(3905));const i={id:"trees-overview",title:"Trees Overview"},o=void 0,l={unversionedId:"algorithms/trees/trees-overview",id:"algorithms/trees/trees-overview",title:"Trees Overview",description:"Tree",source:"@site/docs/algorithms/trees/overview.md",sourceDirName:"algorithms/trees",slug:"/algorithms/trees/trees-overview",permalink:"/yogeshcodes/algorithms/trees/trees-overview",tags:[],version:"current",frontMatter:{id:"trees-overview",title:"Trees Overview"},sidebar:"docs",previous:{title:"Graphs Overview",permalink:"/yogeshcodes/algorithms/graphs/graphs-overview"},next:{title:"Two Pointer Technique",permalink:"/yogeshcodes/algorithms/two-pointer-technique"}},s=[{value:"Tree",id:"tree",children:[],level:3},{value:"Binary Tree",id:"binary-tree",children:[],level:3},{value:"K-ary Tree",id:"k-ary-tree",children:[],level:3},{value:"Perfect Binary Tree",id:"perfect-binary-tree",children:[],level:3},{value:"Complete Binary Tree",id:"complete-binary-tree",children:[],level:3},{value:"Balanced Binary Tree",id:"balanced-binary-tree",children:[],level:3},{value:"Full Binary Tree",id:"full-binary-tree",children:[],level:3}],c={toc:s};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"tree"},"Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A data structure that consists of nodes, each with some values and pointers to child-nodes, which recursively form subtrees in the tree. "),(0,a.kt)("li",{parentName:"ul"},"The first node in a tree is referenced to as the root of the tree, while the nodes at the bottom of a tree (the nodes with no child-nodes) are referred to as leaf nodes or simply leaves. The paths between the root of a tree and it's leaves are called branches, and the height of a tree is the length of its longest branch. The depth of a tree node is its distance from it's tree's root; this is also known as the node's level in the tree. "),(0,a.kt)("li",{parentName:"ul"},"A tree is effectively a graph that's connected, directed and acyclic, that has an explicit root node, and whose nodes all have a single parent (except for the root node, which effectively has no parent). Node that in most implementations of trees, tree nodes don't have a pointer to their parent, but they can if desired. "),(0,a.kt)("li",{parentName:"ul"},"There are many types of trees and tree-like structures, including binary trees, heaps and tries. ")),(0,a.kt)("h3",{id:"binary-tree"},"Binary Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A tree whose nodes have up to two child-nodes."),(0,a.kt)("li",{parentName:"ul"},"The structure of a binary tree is such that many of it's operations have a logarithmic time complexity, making the binary tree an incredibly attractive and commonly used data structure. ")),(0,a.kt)("h3",{id:"k-ary-tree"},"K-ary Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A tree whose nodes have upto k child-nodes. A binary tree is a k-ary tree where k == 2.")),(0,a.kt)("h3",{id:"perfect-binary-tree"},"Perfect Binary Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A binary tree whose interior nodes all have two child-nodes and whose leaf nodes all have the same depth. Example.\n",(0,a.kt)("img",{parentName:"li",src:"https://qphs.fs.quoracdn.net/main-qimg-5ce3c21053ee212f39cf610f4fbd1cd7",alt:"Perfect Binary Tree"}))),(0,a.kt)("h3",{id:"complete-binary-tree"},"Complete Binary Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"A binary tree that's almost perfect; its interior nodes all have two child-nodes, but it's leaf nodes don't necessarily all have the same depth. Furthermore, the nodes in the last level of a complete binary tree are far left as possible. Example:\n",(0,a.kt)("img",{parentName:"p",src:"https://i.ytimg.com/vi/bvpiyKo9hnI/maxresdefault.jpg",alt:"Complete Binary Tree"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Conversely, the following binary tree isn't complete, because the nodes in its last level aren't as far left as possible:"))),(0,a.kt)("h3",{id:"balanced-binary-tree"},"Balanced Binary Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A binary tree whose nodes all have left and right subtrees whose heights differ by no more than 1."),(0,a.kt)("li",{parentName:"ul"},"A balanced binary tree is such that the logarithmic time complexity of its operations is maintained. "),(0,a.kt)("li",{parentName:"ul"},"For example, inserting a node at the bottom of the following imbalanced binary tree's left subtree would cleary not be a logarithmic-time operation, since it would involve traversing through most of the tree's nodes:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://helloacm.com/wp-content/uploads/2016/04/balanced-tree-or-not.png",alt:"Balanced Binary Tree"})),(0,a.kt)("h3",{id:"full-binary-tree"},"Full Binary Tree"),(0,a.kt)("p",null,"A binary tree whose nodes all have either two child-nodes or zero child-nodes. Example:\n",(0,a.kt)("img",{parentName:"p",src:"https://qph.fs.quoracdn.net/main-qimg-40e38df78ff09c509f60ce21c0127e22",alt:"Full Binary Tree"})))}h.isMDXComponent=!0}}]);