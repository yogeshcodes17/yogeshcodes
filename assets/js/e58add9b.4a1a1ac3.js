"use strict";(self.webpackChunkwiki_docusaurus=self.webpackChunkwiki_docusaurus||[]).push([[9334],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,f=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3740:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>s,metadata:()=>i,toc:()=>c,default:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={id:"constructor-pattern",title:"Constructor Pattern"},s=void 0,i={unversionedId:"coding-patterns/structural/constructor-pattern",id:"coding-patterns/structural/constructor-pattern",title:"Constructor Pattern",description:"When thinking about classical object-oriented languages, a constructor is a special function in a class which initializes an object with some set of default and/or sent-in values.",source:"@site/docs/coding-patterns/structural/constructor-pattern.md",sourceDirName:"coding-patterns/structural",slug:"/coding-patterns/structural/constructor-pattern",permalink:"/yogeshcodes/coding-patterns/structural/constructor-pattern",tags:[],version:"current",frontMatter:{id:"constructor-pattern",title:"Constructor Pattern"},sidebar:"docs",previous:{title:"Command Pattern",permalink:"/yogeshcodes/coding-patterns/structural/command-pattern"},next:{title:"Facade Pattern",permalink:"/yogeshcodes/coding-patterns/structural/facade-pattern"}},c=[],p={toc:c};function l(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When thinking about classical object-oriented languages, a constructor is a special function in a class which initializes an object with some set of default and/or sent-in values."),(0,o.kt)("p",null,"Common ways to create objects in JavaScript are the three following ways:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// either of the following ways can be used to create a new object\nvar instance = {};\n// or\nvar instance = Object.create(Object.prototype);\n// or\nvar instance = new Object();\n")),(0,o.kt)("p",null,"After creating an object, there are four ways (since ES3) to add properties to these objects. They are the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// supported since ES3\n// the dot notation\ninstance.key = "A key\'s value";\n\n// the square brackets notation\ninstance["key"] = "A key\'s value";\n\n// supported since ES5\n// setting a single property using Object.defineProperty\nObject.defineProperty(instance, "key", {\n    value: "A key\'s value",\n    writable: true,\n    enumerable: true,\n    configurable: true\n});\n\n// setting multiple properties using Object.defineProperties\nObject.defineProperties(instance, {\n    "firstKey": {\n        value: "First key\'s value",\n        writable: true\n    },\n    "secondKey": {\n        value: "Second key\'s value",\n        writable: false\n    }\n});\n')),(0,o.kt)("p",null,"The most popular way to create objects is the curly brackets and, for adding properties, the dot notation or square brackets. Anyone with any experience with JavaScript has used them."),(0,o.kt)("p",null,"We mentioned earlier that JavaScript doesn\u2019t support native classes, but it does support constructors through the use of a \u201cnew\u201d keyword prefixed to a function call. This way, we can use the function as a constructor and initialize its properties the same way we would with a classic language constructor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// we define a constructor for Person objects\nfunction Person(name, age, isDeveloper) {\n    this.name = name;\n    this.age = age;\n    this.isDeveloper = isDeveloper || false;\n\n    this.writesCode = function() {\n      console.log(this.isDeveloper? "This person does write code" : "This person does not write code");\n    }\n}\n\n// creates a Person instance with properties name: Bob, age: 38, isDeveloper: true and a method writesCode\nvar person1 = new Person("Bob", 38, true);\n// creates a Person instance with properties name: Alice, age: 32, isDeveloper: false and a method writesCode\nvar person2 = new Person("Alice", 32);\n\n// prints out: This person does write code\nperson1.writesCode();\n// prints out: this person does not write code\nperson2.writesCode();\n')),(0,o.kt)("p",null,"However, there is still room for improvement here. If you\u2019ll remember, I mentioned previously that JavaScript uses prototype-based inheritance. The problem with the previous approach is that the method\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"writesCode"),"\xa0gets redefined for each of the instances of the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Person"),"\xa0constructor. We can avoid this by setting the method into the function prototype:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// we define a constructor for Person objects\nfunction Person(name, age, isDeveloper) {\n    this.name = name;\n    this.age = age;\n    this.isDeveloper = isDeveloper || false;\n}\n\n// we extend the function\'s prototype\nPerson.prototype.writesCode = function() {\n    console.log(this.isDeveloper? "This person does write code" : "This person does not write code");\n}\n\n// creates a Person instance with properties name: Bob, age: 38, isDeveloper: true and a method writesCode\nvar person1 = new Person("Bob", 38, true);\n// creates a Person instance with properties name: Alice, age: 32, isDeveloper: false and a method writesCode\nvar person2 = new Person("Alice", 32);\n\n// prints out: This person does write code\nperson1.writesCode();\n// prints out: this person does not write code\nperson2.writesCode();\n')),(0,o.kt)("p",null,"Now, both instances of the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Person"),"\xa0constructor can access a shared instance of the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"writesCode()"),"\xa0method."))}l.isMDXComponent=!0}}]);